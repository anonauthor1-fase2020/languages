// See Listing 8 on p. 21 of the technical report
import microservices from "customerCore.services" as customerCoreServices
import technology from "../technology/java.technology" as java
import technology from "../technology/eadr.technology" as eadr
import technology from "../technology/lakesideMutual.technology" as lakesideMutual
import technology from "../technology/map.technology" as map

@technology(java)
type customerCoreServices::customerCore::customer.Address {
	aspects {
		java::_aspects.Table("addresses");
	}

	id { aspects { java::_aspects.GeneratedValue; } }
}

@technology(java)
type customerCoreServices::customerCore::customer.CustomerId {
	op random { aspects { java::_aspects.static; } }
}

@technology(java)
type customerCoreServices::customerCore::customer.CustomerProfileEntity {
	currentAddress { aspects { java::_aspects.OneToOne; } }

	moveHistory {
		aspects {
			java::_aspects.Collection;
			java::_aspects.OneToMany;
		}
	}
}

@technology(java)
@technology(eadr)
type customerCoreServices::customerCore::customer.CustomerAggregateRoot {
	aspects { java::_aspects.Table("customers"); }

	id { aspects { java::_aspects.EmbeddedId; } }

	op moveToAddress {
		aspects {
			eadr::_aspects.MADR(
				value = 1,
				title = "Data transfer between interface layer and domain layer",
				contextAndProblem = "
					Need to pass information from the interfaces layer to the domain layer without
					introducing a layering violation
				",
				alternatives = "
					Pass existing domain objects,
					Pass the DTOs directly,
					Pass the components of the DTO,
					Add a new value type in the domain layer and use it as parameter object
				",
				chosenAlternative = "Pass existing domain objects",
				justification = "
					This solution doesn't introduce a layering violation and it is simple because it
					doesn't require any additional classes.
				"
			);
		}
	}
}

@technology(java)
type customerCoreServices::customerCore::customer.CustomerFactory {
	op formatPhoneNumber { aspects { java::_aspects.static; } }
}

@technology(java)
type customerCoreServices::customerCore::city.CityLookupService {
	op loadLookupMap {
		aspects {
			java::_aspects.Multimap;
		}
	}
	op getLookupMap  {
		aspects {
			java::_aspects.Multimap;
		}
	}
}

@technology(map)
type customerCoreServices::customerCore::customer_dtos.AddressDto {
	aspects { map::_aspects.AtomicParameterList; }
}

@technology(java, typedef=true)
@technology(lakesideMutual)
type customerCoreServices::customerCore::customer_dtos.CustomerProfileUpdateRequestDto {
	birthday { aspects { java::_aspects.JsonFormat("yyyy-MM-dd"); } }
	phoneNumber { aspects { lakesideMutual::_aspects.PhoneNumber; } }
}

@technology(java)
@technology(map)
type customerCoreServices::customerCore::customer_dtos.CustomerResponseDto {
	aspects {
		java::_aspects.ResourceSupport;
		map::_aspects.ParameterTree;
	}

	moveHistory {
		aspects {
			java::_aspects.Collection;
		}
	}
}

@technology(java)
@technology(map)
type customerCoreServices::customerCore::customer_dtos.CustomersResponseDto {
	aspects {
		java::_aspects.ResourceSupport;
		map::_aspects.ParameterForest;
	}
}

@technology(java)
@technology(map)
type customerCoreServices::customerCore::customer_dtos.PaginatedCustomerResponseDto {
	aspects {
		java::_aspects.ResourceSupport;
		map::_aspects.Pagination;
	}
}

@technology(map)
type customerCoreServices::customerCore::city_dtos.CitiesResponseDto {
	aspects { map::_aspects.AtomicParameter; }
}

@technology(java, typedef=true)
@technology(lakesideMutual)
type customerCoreServices::customerCore::customer.CustomerService {
	op getCustomers {
		return type : lakesideMutual::_types.Page;
	}
}

/*@technology(java)
customerCoreServices::com.lakesidemutual.customercore.CustomerCore {}*/