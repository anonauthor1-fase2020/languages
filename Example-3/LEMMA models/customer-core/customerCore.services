// See Listing 7 on p. 20 of the technical report
import datatypes from "customerCore.data" as customerCore
import technology from "../technology/java.technology" as java
import technology from "../technology/map.technology" as map

// See Listing 10 on p. 25 of the technical report
@technology(java)
@technology(map)
@java::_aspects.ApplicationName("Customer Core")
@java::_aspects.JacksonConfiguration(INDENT_OUTPUT=true, defaultPropertyInclusion="NON_NULL")
@java::_aspects.DatasourceConfiguration(
	url="jdbc:h2:file:./customercore",
	username="sa",
	password="sa",
	driverClassName="org.h2.Driver"
)
@java::_aspects.HibernateConfiguration("create-drop")
// See Listing 9 on pp. 23 to 24 of the technical report
public functional microservice com.lakesidemutual.customercore.CustomerCore {
	@endpoints(java::_protocols.rest: "/cities";)
	@map::_aspects.StaticDataHolder
	interface cityStaticDataHolder {
		---
		Get the cities for a particular postal code.

		@required postalCode the postal code
		---
		@endpoints(java::_protocols.rest: "/{postalCode}";)
		@java::_aspects.GetMapping
		getCitiesForPostalCode(
			@java::_aspects.PathVariable
			sync postalCode : string,

			@java::_aspects.ResponseEntity
			sync out cities : customerCore::city_dtos.CitiesResponseDto
		);
	}

	// See Listing 11 on p. 25 of the technical report
	@endpoints(java::_protocols.rest: "/customers";)
	@map::_aspects.InformationHolderResource
	@map::_aspects.MasterDataHolder
	interface customerInformationHolder {
		---
		Change a customer's address.

		@required customerId the customer's unique id
		@required requestDto the customer's new address
		---
		@endpoints(java::_protocols.rest: "/{customerId}/address";)
		@java::_aspects.PutMapping
		changeAddress(
			@java::_aspects.PathVariable
			sync customerId : customerCore::customer.CustomerId,

			@java::_aspects.Valid
			@java::_aspects.RequestBody
			sync requestDto : customerCore::customer_dtos.AddressDto,

			@java::_aspects.ResponseEntity
			sync out responseDto : customerCore::customer_dtos.AddressDto,

			@java::_aspects.ResponseStatus("NOT_FOUND")
			sync out fault customerNotFound : string
		);

		internal getIncludedFields(
			sync ^fields : string,

			@java::_aspects.Set
			sync out result : customerCore::city.FieldNames
		);

		internal createCustomerResponseDto(
			sync customer : customerCore::customer.CustomerAggregateRoot,
			sync ^fields : string,
			sync out customerResponseDto : customerCore::customer_dtos.CustomerResponseDto
		);

		internal createPaginatedCustomerResponseDto(
			sync filter : string,
			sync limit : int,
			sync offset : int,
			sync size : int,
			sync ^fields : string,
			sync customerDtos : customerCore::customer_dtos.CustomerResponses,
			sync out responseDto : customerCore::customer_dtos.PaginatedCustomerResponseDto
		);

		---
		Get a specific set of customers.

		@required ids a comma-separated list of customer ids
		@param ^fields a comma-separated list of the fields that should be included in the response
		---
		// See Listing 12 on p. 26 of the technical report
		@endpoints(java::_protocols.rest: "/{ids}";)
		@java::_aspects.GetMapping
		@map::_aspects.RequestBundle
		@map::_aspects.WishList
		getCustomer(
			@java::_aspects.PathVariable
			sync ids : string,

			@java::_aspects.RequestParam(value="fields")
			sync ^fields? : string,

			@java::_aspects.ResponseEntity
			sync out customersResponseDto : customerCore::customer_dtos.CustomerResponseDto
		);

		---
		Update the profile of the customer with the given customer id.

		@required customerId the customer's unique id
		@required requestDto the customer's updated profile
		---
		@endpoints(java::_protocols.rest: "/{customerId}";)
		@java::_aspects.PutMapping
		updateCustomer(
			@java::_aspects.PathVariable
			sync customerId : customerCore::customer.CustomerId,

			@java::_aspects.Valid
			@java::_aspects.RequestBody
			sync requestDto : customerCore::customer_dtos.CustomerProfileUpdateRequestDto,

			@java::_aspects.ResponseEntity
			sync out customersResponseDto : customerCore::customer_dtos.CustomerResponseDto,

			@java::_aspects.ResponseStatus("NOT_FOUND")
			sync out fault customerNotFound : string
		);

		---
		Get all customers in pages of 10 entries per page.

		@param filter search terms to filter the customers by name
		@param limit the maximum number of customers per page
		@param offset the offset of the page's first customer
		@param ^fields a comma-separated list of the fields that should be included in the response
		---
		@java::_aspects.GetMapping
		getCustomers(
			@java::_aspects.RequestParam(value="filter")
			sync filter? : string,

			@java::_aspects.RequestParam(value="limit", defaultValue="10")
			sync limit? : int,

			@java::_aspects.RequestParam(value="offset", defaultValue="0")
			sync offset? : int,

			@java::_aspects.RequestParam(value="fields")
			sync ^fields? : string,

			@java::_aspects.ResponseEntity
			sync out customersResponseDto : customerCore::customer_dtos.PaginatedCustomerResponseDto
		);

		---
		Create a new customer.

		@required reuestDto the customer's profile information
		@param limit the maximum number of customers per page
		@param offset the offset of the page's first customer
		@param ^fields a comma-separated list of the fields that should be included in the response
		---
		@java::_aspects.PostMapping
		createCustomer(
			@java::_aspects.Valid
			@java::_aspects.RequestBody
			sync reuestDto : customerCore::customer_dtos.CustomerProfileUpdateRequestDto,

			@java::_aspects.RequestParam(value="limit", defaultValue="10")
			sync limit? : int,

			@java::_aspects.RequestParam(value="offset", defaultValue="0")
			sync offset? : int,

			@java::_aspects.RequestParam(value="fields")
			sync ^fields? : string,

			@java::_aspects.ResponseEntity
			sync out customersResponseDto : customerCore::customer_dtos.CustomerResponseDto
		);
	}
}