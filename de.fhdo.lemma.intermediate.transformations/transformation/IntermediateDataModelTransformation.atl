-- @path Data=/de.fhdo.lemma.data.datadsl.metamodel/model/DataViewpointModel.xcore
-- @path Service=/de.fhdo.lemma.servicedsl.metamodel/model/ServiceViewpointModel.xcore
-- @path Intermediate=/de.fhdo.lemma.data.intermediate.metamodel/model/IntermediateDataModel.xcore

-- Author: 
-- E-mail: 

module IntermediateDataModelTransformation;
create OUT : Intermediate from IN : Data;

-- Helpers for managing created import instances ---------------------------------------------------
--- Helper to store created IntermediateImport instances. It maps the name of imports to the created
--- instances and hence enables, e.g., to identify a target IntermediateImport instance from the
--- name of a source Import instance.
helper def : createdImports : Map(String, Intermediate!IntermediateImport) = Map{};

--- Called helper rule to add a created IntermediateImport instance to the helper map of created
--- IntermediateImport instances. Note that we cannot use a "normal" helper here, because we need to
--- assign the helper map to itself to populate it.
rule CreatedImport(createdImport : Intermediate!IntermediateImport) {
    do {
        thisModule.createdImports <- thisModule.createdImports
            ->including(createdImport.name, createdImport);
    }
}

--- Convenience helper to get a created IntermediateImport instance from a given source Import
--- instance
helper def : getCreatedImport(sourceImport : Data!ComplexTypeImport)
    : Intermediate!IntermediateImport = thisModule.createdImports->get(sourceImport.name)
;
----------------------------------------------------------------------------------------------------

-- Helpers for managing created version instances --------------------------------------------------
--- Helper to store created IntermediateVersion instances. It maps the name of versions to the
--- created instances and hence enables, e.g., to identify a target IntermediateVersion instance
--- from the name of a source Version instance.
helper def : createdVersions : Map(String, Intermediate!IntermediateVersion) = Map{};

--- Called helper rule to add a created IntermediateVersion instance to the helper map of created
--- IntermediateVersion instances. Note that we cannot use a "normal" helper here, because we need
--- to assign the helper map to itself to populate it.
rule CreatedVersion(createdVersion : Intermediate!IntermediateVersion) {
    do {
        thisModule.createdVersions <- thisModule.createdVersions
            ->including(createdVersion.name, createdVersion);
    }
}

--- Convenience helper to get a created IntermediateVersion instance from a given source Version
--- instance
helper def : getCreatedVersion(sourceVersion : Data!Version)
    : Intermediate!IntermediateVersion = thisModule.createdVersions->get(sourceVersion.name)
;
----------------------------------------------------------------------------------------------------

-- Helpers for managing created context instances --------------------------------------------------
--- Helper to store created IntermediateContext instances. It maps the name of contexts to the
--- created instances and hence enables, e.g., to identify a target IntermediateContext instance
--- from the name of a source Context instance.
helper def : createdContexts : Map(String, Intermediate!IntermediateContext) = Map{};

--- Called helper rule to add a created IntermediateContext instance to the helper map of created
--- IntermediateContext instances. Note that we cannot use a "normal" helper here, because we need
--- to assign the helper map to itself to populate it.
rule CreatedContext(createdContext : Intermediate!IntermediateContext) {
    do {
        thisModule.createdContexts <- thisModule.createdContexts
            ->including(createdContext.qualifiedName, createdContext);
    }
}

--- Convenience helper to get a created IntermediateContext instance from a given source Context
--- instance
helper def : getCreatedContext(sourceContext : Data!Context)
    : Intermediate!IntermediateContext =
        thisModule.createdContexts->get(sourceContext.buildQualifiedName('.'))
;
----------------------------------------------------------------------------------------------------

-- Helpers for managing created complex type instances ---------------------------------------------
--- Helper to store created IntermediateComplexType instances. It maps the name of complex types to
--- the created instances and hence enables, e.g., to identify a target
--- IntermediateComplexType instance from the name of a source ComplexType instance.
helper def : createdComplexTypes : Map(String, Intermediate!IntermediateComplexType) = Map{};

--- Called helper rule to add a created IntermediateComplexType instance to the helper map of
--- created IntermediateComplexType instances. Note that we cannot use a "normal" helper here,
--- because we need to assign the helper map to itself to populate it.
rule CreatedComplexType(createdComplexType : Intermediate!IntermediateComplexType) {
    do {
        thisModule.createdComplexTypes <- thisModule.createdComplexTypes
            ->including(createdComplexType.qualifiedName, createdComplexType);
    }
}

--- Convenience helper to get a created IntermediateComplexType instance from a given source
--- ComplexType instance
helper def : getCreatedComplexType(sourceComplexType : Data!ComplexType)
    : Intermediate!IntermediateComplexType =
            thisModule.createdComplexTypes->get(sourceComplexType.buildQualifiedName('.'))
;
----------------------------------------------------------------------------------------------------

-- Helpers to handle the definition of source super data structures after sub data structures ------
--- Helper to create the link between a sub data structure and a super data structure in case the
--- latter is defined after the former in the same data model. In case this happens, the link is
--- created after the model transformation has finished (and the super data structure got hence
--- created eventually). Otherwise, the link between sub and super data structure could not be
--- established directly because the super data strcuture gets created after the sub data structure.
--- The helper maps the qualified name of a created sub data structure to the qualified name of the
--- "yet-to-create" super data structure.
helper def : delayedSuperLinks : Map(String, String) = Map{};
----------------------------------------------------------------------------------------------------

--- Helper to retrieve a reference to the input model
helper def : inputModel() : Data!DataModel =
    Data!DataModel.allInstances().first()
;

--- Rule to generate the root of the target intermediate data model
unique lazy rule IntermediateDataModel {
    from
        s : Data!DataModel
    to
        t : Intermediate!IntermediateDataModel(
            sourceModelUri <- thisModule.inputModel().t_modelUri,
            imports <- Sequence{},
            versions <- Sequence{},
            contexts <- Sequence{},
            complexTypes <- Sequence{}
        )
}

--- Transform a source ComplexTypeImport to a target IntermediateImport
rule IntermediateImport {
    from
        s : Data!ComplexTypeImport
    to
        t : Intermediate!IntermediateImport(
            name <- s.name,
            importUri <- s.importURI,
            -- Note that normally this would be a direct mapping between the source and the target
            -- importType. However, the XMI serlializer seems to be bugged. See the comments in the
            -- metamodel on why here the name of the import type is used instead.
            importTypeName <- t.importTypeNameForDatatypes,
            dataModel <- thisModule.IntermediateDataModel()
        )
    do {
        -- Assign created target instance to the list of imports under the model root. This
        -- completes the binary association IntermediateDataModel.imports <-->
        -- IntermediateImport.dataModel
        thisModule.IntermediateDataModel().imports <- thisModule.IntermediateDataModel()
            .imports->append(t);

        -- Populate helper of created IntermediateImport instances
        thisModule.CreatedImport(t);
    }
}

--- Transform a source Version to a target IntermediateVersion
rule IntermediateVersion {
    from
        s : Data!Version
    to
        t : Intermediate!IntermediateVersion(
            name <- s.name,
            contexts <- Sequence{},
            complexTypes <- Sequence{},
            dataModel <- thisModule.IntermediateDataModel()
        )
    do {
        thisModule.IntermediateDataModel().versions <- thisModule.IntermediateDataModel()
            .versions->append(t);

        thisModule.CreatedVersion(t);
    }
}

--- Transform a source Context to a target IntermediateContext
rule IntermediateContext {
    from
        s : Data!Context
    to
        t : Intermediate!IntermediateContext(
            name <- s.name,
            qualifiedName <- s.buildQualifiedName('.'),
            complexTypes <- Sequence{}
        )
    do {
        if (not s.dataModel.oclIsUndefined()) {
            t.dataModel <- thisModule.IntermediateDataModel();
            t.dataModel.contexts->append(t);
        } else if (not s.version.oclIsUndefined()) {
            t.version <- thisModule.getCreatedVersion(s.version);
            t.version.contexts->append(t);
        }

        thisModule.CreatedContext(t);
    }
}

--- Transform a source DataStructure to a target IntermediateDataStructure
rule IntermediateDataStructure {
    from
        s : Data!DataStructure
    to
        t : Intermediate!IntermediateDataStructure(
            name <- s.name,
            qualifiedName <- s.buildQualifiedName('.'),
            origin <- #DATA_MODEL,
            kind <- #STRUCTURE,
            dataFields <- Sequence{},
            featureNames <- s.features->collect(f | f.toString())
        )
    do {
        if (not s.super.oclIsUndefined()) {
            t.super <- thisModule.getCreatedComplexType(s.super);

            if (t.super.oclIsUndefined())
                thisModule.delayedSuperLinks <- thisModule.createdComplexTypes
                    ->including(t.qualifiedName, s.super.buildQualifiedName('.'));
        }

        if (not s.dataModel.oclIsUndefined()) {
            t.dataModel <- thisModule.IntermediateDataModel();
            t.dataModel.complexTypes->append(t);
        } else if (not s.version.oclIsUndefined()) {
            t.version <- thisModule.getCreatedVersion(s.version);
            t.version.complexTypes->append(t);
        } else if (not s.context.oclIsUndefined()) {
            t.context <- thisModule.getCreatedContext(s.context);
            t.context.complexTypes->append(t);
        }

        for (field in s.getEffectiveFields()) {
            t.dataFields <- t.dataFields->append(
                thisModule.IntermediateDataField(
                    field,
                    t,
                    not s.dataFields->exists(f | f.name = field.name) or
                    s.dataFields->exists(f |
                        f.name = field.name and f.getEffectiveType().oclIsUndefined()
                    )
                )
            );

            if (s.dataFields->exists(f | f.name = field.name and f.hidden))
                t.dataFields->last().hidden <- true;
        }

        for (operation in s.getEffectiveOperations()) {
            t.operations <- t.operations->append(
                thisModule.IntermediateDataOperation(
                    operation,
                    t,
                    not s.operations->exists(o | o.name = operation.name) or
                    s.operations->exists(o |
                        o.name = operation.name and
                        not o.findEponymousSuperOperation().oclIsUndefined()
                    )

                )
            );

            if (s.operations->exists(o | o.name = operation.name and o.hidden))
                t.operations->last().hidden <- true;
        }

        thisModule.CreatedComplexType(t);
    }
}

--- Called rule to create an IntermediateDataOperation
rule IntermediateDataOperation(sourceOperation : Data!DataOperation,
    dataStructure : Intermediate!IntermediateDataStructure, inherited : Boolean) {
    using {
        sourceContainerQualifiedName : String
            = sourceOperation.dataStructure.buildQualifiedName('.');
    }
    to
        t : Intermediate!IntermediateDataOperation(
            name <- sourceOperation.name,
            hidden <- sourceOperation.hidden,
            inherited <- inherited,
            dataStructure <- dataStructure
        )
    do {
        if (not inherited) {
            t.qualifiedName <- sourceOperation.buildQualifiedName('.');

            -- Add features only to non-inherited operations
            t.featureNames <- sourceOperation.features->collect(f | f.toString());
        } else
            t.qualifiedName <- sourceContainerQualifiedName
                .concat('.')
                .concat(sourceOperation.name);

        if (not sourceOperation.hasNoReturnType)
            t.returnType <- thisModule.IntermediateDataOperationReturnType(sourceOperation, t);

        for (parameter in sourceOperation.parameters) {
            thisModule.IntermediateDataOperationParameter(parameter, t);
        }

        t.dataStructure.dataFields->append(t);
        t;
    }
}

--- Called rule to create an IntermediateDataOperationReturnType
rule IntermediateDataOperationReturnType(sourceOperation : Data!DataOperation,
    targetOperation : Intermediate!IntermediateDataOperation) {
    to
        t : Intermediate!IntermediateDataOperationReturnType(
            operation <- targetOperation
        )
    do {
        if (not sourceOperation.primitiveReturnType.oclIsUndefined())
            t.type <- thisModule.IntermediatePrimitiveType(
                sourceOperation.primitiveReturnType.typeName,
                sourceOperation.primitiveReturnType.typeSize);
        else if (not sourceOperation.complexReturnType.oclIsUndefined())
            t.type <- thisModule.IntermediateComplexType(sourceOperation.complexReturnType);
        else if (not sourceOperation.importedComplexReturnType.oclIsUndefined())
            t.type <- thisModule.IntermediateImportedComplexType(
                sourceOperation.importedComplexReturnType
            );

        t;
    }
}

--- Called rule to create an IntermediateDataOperationParameter
rule IntermediateDataOperationParameter(sourceParameter : Data!DataOperationParameter,
    operation : Intermediate!IntermediateDataOperation) {
    to
        t : Intermediate!IntermediateDataOperationParameter(
            name <- sourceParameter.name,
            qualifiedName <- sourceParameter.buildQualifiedName('.'),
            operation <- operation
        )
    do {
        if (not sourceParameter.primitiveType.oclIsUndefined())
            t.type <- thisModule.IntermediatePrimitiveType(sourceParameter.primitiveType.typeName,
                sourceParameter.primitiveType.typeSize);
        else if (not sourceParameter.complexType.oclIsUndefined())
            t.type <- thisModule.IntermediateComplexType(sourceParameter.complexType);
        else if (not sourceParameter.importedComplexType.oclIsUndefined())
            t.type <- thisModule.IntermediateImportedComplexType(
                sourceParameter.importedComplexType
            );

        t.operation.parameters <- t.operation.parameters->append(t);
        t;
    }
}

--- Called rule to create an IntermediateDataField
rule IntermediateDataField(sourceField : Data!DataField,
    targetContainer : Intermediate!IntermediateComplexType, inherited : Boolean) {
    using {
        sourceContainerQualifiedName : String =
            if (not sourceField.dataStructure.oclIsUndefined()) then
                sourceField.dataStructure.buildQualifiedName('.')
            else if (not sourceField.listType.oclIsUndefined()) then
                sourceField.listType.buildQualifiedName('.')
            else
                OclUndefined
            endif
            endif;

        compatibleTypes : Map(String, Integer) =
            if (not sourceField.initializationValue.oclIsUndefined()) then
                sourceField.initializationValue.inferCompatibleTypes()
            else
                Map{}
            endif;
    }
    to
        t : Intermediate!IntermediateDataField(
            name <- sourceField.name,
            hidden <- sourceField.hidden,
            immutable <- sourceField.immutable,
            inherited <- inherited,
            initializationValueCompatibleTypes <- Sequence{}
        )
    do {
        if (not inherited) {
            t.qualifiedName <- sourceField.buildQualifiedName('.');

            -- Add features only to non-inherited fields
            t.featureNames <- sourceField.features->collect(f | f.toString());
        } else
            t.qualifiedName <- sourceContainerQualifiedName.concat('.').concat(sourceField.name);

        if (not sourceField.primitiveType.oclIsUndefined())
            t.type <- thisModule.IntermediatePrimitiveType(sourceField.primitiveType.typeName,
                sourceField.primitiveType.typeSize);
        else if (not sourceField.complexType.oclIsUndefined())
            t.type <- thisModule.IntermediateComplexType(sourceField.complexType);
        else if (not sourceField.importedComplexType.oclIsUndefined())
            t.type <- thisModule.IntermediateImportedComplexType(sourceField.importedComplexType);

        if (targetContainer.oclIsTypeOf(Intermediate!IntermediateDataStructure)) {
            t.dataStructure <- targetContainer;
            t.dataStructure.dataFields->append(t);
        } else if (targetContainer.oclIsTypeOf(Intermediate!IntermediateListType)) {
            t.listType <- targetContainer;
            t.listType.dataFields->append(t);
        }

        if (not sourceField.initializationValue.oclIsUndefined())
            t.initializationValue <- sourceField.initializationValue.valueAsString();

        for (typeName in compatibleTypes.getKeys()) {
            if (compatibleTypes.get(typeName) > -1)
                t.initializationValueCompatibleTypes <-
                    t.initializationValueCompatibleTypes->append(
                        thisModule.IntermediatePrimitiveType(
                            typeName,
                            compatibleTypes.get(typeName)
                        )
                    );
            else
                t.initializationValueCompatibleTypes <-
                    t.initializationValueCompatibleTypes->append(
                        thisModule.IntermediatePrimitiveType(typeName, OclUndefined)
                    );
        }

        for (compatibleType in t.initializationValueCompatibleTypes) {
            compatibleType.initializedDataField <- t;
        }

        t;
    }
}

--- Transform a source ListType to a target IntermediateListType
rule IntermediateListType {
    from
        s : Data!ListType
    to
        t : Intermediate!IntermediateListType(
            name <- s.name,
            qualifiedName <- s.buildQualifiedName('.'),
            origin <- #DATA_MODEL,
            kind <- #LIST,
            primitiveList <- s.isPrimitiveList,
            structuredList <- s.isStructuredList,
            dataFields <- Sequence{}
        )
    do {
        if (not s.dataModel.oclIsUndefined()) {
            t.dataModel <- thisModule.IntermediateDataModel();
            t.dataModel.complexTypes->append(t);
        } else if (not s.version.oclIsUndefined()) {
            t.version <- thisModule.getCreatedVersion(s.version);
            t.version.complexTypes->append(t);
        } else if (not s.context.oclIsUndefined()) {
            t.context <- thisModule.getCreatedContext(s.context);
            t.context.complexTypes->append(t);
        }

        if (not s.primitiveType.oclIsUndefined())
            t.primitiveType <- thisModule.IntermediatePrimitiveType(s.primitiveType.typeName,
                s.primitiveType.typeSize);
        else
            for (dataField in s.dataFields) {
                t.dataFields->append(thisModule.IntermediateDataField(dataField, t, false));
            }

        thisModule.CreatedComplexType(t);
    }
}

--- Transform a source Enumeration to a target IntermediateEnumeration
rule IntermediateEnumeration {
    from
        s : Data!Enumeration
    to
        t : Intermediate!IntermediateEnumeration(
            name <- s.name,
            qualifiedName <- s.buildQualifiedName('.'),
            origin <- #DATA_MODEL,
            kind <- #ENUMERATION,
            fields <- Sequence{}
        )
    do {
        if (not s.dataModel.oclIsUndefined()) {
            t.dataModel <- thisModule.IntermediateDataModel();
            t.dataModel.complexTypes->append(t);
        } else if (not s.version.oclIsUndefined()) {
            t.version <- thisModule.getCreatedVersion(s.version);
            t.version.complexTypes->append(t);
        } else if (not s.context.oclIsUndefined()) {
            t.context <- thisModule.getCreatedContext(s.context);
            t.context.complexTypes->append(t);
        }

        for (field in s.fields) {
            t.fields->append(thisModule.IntermediateEnumerationField(field, t));
        }

        thisModule.CreatedComplexType(t);
    }
}

--- Called rule to create an IntermediateEnumerationField
rule IntermediateEnumerationField(sourceField : Data!EnumerationField,
    containingEnumeration : Intermediate!IntermediateEnumeration) {
    using {
        compatibleTypes : Map(String, Integer) =
            if (not sourceField.initializationValue.oclIsUndefined()) then
                sourceField.initializationValue.inferCompatibleTypes()
            else
                Map{}
            endif;
    }
    to
        t : Intermediate!IntermediateEnumerationField(
            name <- sourceField.name,
            qualifiedName <- sourceField.buildQualifiedName('.'),
            initializationValueCompatibleTypes <- Sequence{},
            enumeration <- containingEnumeration
        )
    do {
        if (not sourceField.initializationValue.oclIsUndefined())
            t.initializationValue <- sourceField.initializationValue.valueAsString();

        for (typeName in compatibleTypes.getKeys()) {
            if (compatibleTypes.get(typeName) > -1)
                t.initializationValueCompatibleTypes <-
                    t.initializationValueCompatibleTypes->append(
                        thisModule.IntermediatePrimitiveType(
                            typeName,
                            compatibleTypes.get(typeName)
                        )
                    );
            else
                t.initializationValueCompatibleTypes <-
                    t.initializationValueCompatibleTypes->append(
                        thisModule.IntermediatePrimitiveType(typeName, OclUndefined)
                    );
        }

        for (compatibleType in t.initializationValueCompatibleTypes) {
            compatibleType.initializedEnumerationField <- t;
        }

        t;
    }
}

--- Called rule to create an IntermediatePrimitiveType instance
rule IntermediatePrimitiveType(typeName : String, typeSize : Integer) {
    to
        t : Intermediate!IntermediatePrimitiveType(
            name <- typeName,
            size <- typeSize,
            origin <- #BUILTIN,
            kind <- #PRIMITIVE
        )
    do {
        t;
    }
}

--- Called rule to create an IntermediateComplexType instance
rule IntermediateComplexType(sourceType : Data!ComplexType) {
    to
        t : Intermediate!IntermediateComplexType(
            name <- sourceType.name,
            qualifiedName <- sourceType.buildQualifiedName('.'),
            origin <- #DATA_MODEL
        )
    do {
        if (sourceType.oclIsTypeOf(Data!ListType)) {
            t.kind <- #LIST;
        } else if (sourceType.oclIsTypeOf(Data!DataStructure)) {
            t.kind <- #STRUCTURE;
        }

        t;
    }
}

--- Called rule to create an IntermediateImportedComplexType instance
rule IntermediateImportedComplexType(sourceType : Data!ImportedComplexType) {
    using {
        importedType : Data!ComplexType = sourceType.importedType;
    }
    to
        t : Intermediate!IntermediateImportedComplexType(
            name <- importedType.name,
            qualifiedName <- importedType.buildQualifiedName('.'),
            origin <- #DATA_MODEL,
            import <- thisModule.getCreatedImport(sourceType.import)
        )
    do {
        if (importedType.oclIsTypeOf(Data!ListType)) {
            t.kind <- #LIST;
        } else if (importedType.oclIsTypeOf(Data!DataStructure)) {
            t.kind <- #STRUCTURE;
        }

        t;
    }
}

--- Called rule to establish delayed super links between data structures
endpoint rule EstablishDelayedSuperLinks() {
    do {
        for (subQualifiedName in thisModule.delayedSuperLinks.getKeys()) {
            thisModule.createdComplexTypes.get(subQualifiedName).super <-
                thisModule.createdComplexTypes
                    .get(thisModule.delayedSuperLinks.get(subQualifiedName));
        }
    }
}